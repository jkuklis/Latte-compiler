Kompilator Latte dla 32-bitowej architektury x86.

Alokacja rejestrów nie jest robiona optymalnie, ale zastosowałem pewne optymalizacje
pozwalające w wielu przypadkach nie tworzyć kodu jak dla maszyny stosowej.
W porównaniu z poprzednią częścią, którą oddałem, teraz kod wygląda schludniej.

Funkcje, które nie pojawiłyby się w kodzie przez wyeliminowanie wyrażeń stałych są dodatkowo wywoływane,
żeby zachować wszystkie efekty uboczne (wypisania na ekran, pobieranie wartości z wejścia).

Zawsze prawdziwe if'y są redukowane do związanych z nimi instrukcji.

Usuwane są instrukcje nieosiągalne - instrukcje po returnach, w zawsze fałszywych gałęziach ifów.

Rozszerzenia: pełne klasy - kompilator działa poprawnie na dostarczonych testach.

Dodatkowo można odwoływać się poprzez 'self' do wartości atrybutów klasy,
nawet gdy są przysłonięte deklaracjami zmiennych o tych samych nazwach.

Dopuszczalne jest tylko pojedyncze zagnieżdżenie kropek, co jednak wystarcza, żeby
"dosięgnąć" dowolnie zagnieżdżonego atrybutu.

Wyjaśnienie:
tmp = a . b . c; niedopuszczalne, ale można zrobić tmp = a . b; tmp2 = b . c;


Zbudowanie:
(jeśli odpowiednia wersja bnfc z numerami linii jest dostępna):
    # ustawienie zmiennej bnfc_binary w Makefile'u na ścieżkę do bnfc
    make

(jeśli odpowiednia wersja bnfc ma być pobrana)
    make bnfc
    make


Uruchomienie:
    ./latc <plik>.lat
    ./latc_x86 <plik>.lat
